Q4. Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?


Precedence:
Precedence defines the priority of operators. Operators with higher precedence are evaluated first. 
When different operators are used in the same expression, 
the one with higher precedence is applied before those with lower precedence.

let result = 5 + 3 * 2;
In this example, the multiplication operator (*) has higher precedence than the addition operator (+). 
So, 3 * 2 is evaluated first, and then the result is added to 5.

Common operators and their precedence (from highest to lowest):
() (parentheses) - Highest precedence
++, -- (postfix increment/decrement)
++, -- (prefix increment/decrement), - (unary negation), + (unary plus), ! (logical NOT), typeof, void, delete
*, /, % (multiplication, division, modulus)
+, - (addition, subtraction)
<<, >>, >>> (bitwise shift operators)
<, <=, >, >=, instanceof, in (comparison operators)
==, !=, ===, !== (equality operators)
& (bitwise AND)
^ (bitwise XOR)
| (bitwise OR)
&& (logical AND)
|| (logical OR)
? : (ternary/conditional operator)
= (assignment) - Lowest precedence
Associativity:

Associativity defines the order in which operators with the same precedence are executed. 
It can be left-to-right or right-to-left.
ex-let result = 5 + 3 - 2;
Common operators and their associativity:
Left-to-right: +, -, *, /, %, <<, >>, >>>, <, <=, >, >=, ==, !=, ===, !==, &, ^, |
Right-to-left: =, +=, -=, *=, /=, %=, <<=, >>=, >>>=, &=, ^=, |=


Correct Expression Evaluation:-Understanding the order of precedence ensures that expressions are
evaluated correctly, preventing potential errors or unexpected results.
 
Predective code:-When working with complex expressions, knowing the precedence and associativity
allows developers to write code that behaves as intended, making it easier to reason about and maintain.

Debugging code:-In case of unexpected results, knowing operator precedence and
associativity helps in debugging and identifying the root cause of issues.

optimize code:-Knowledge of precedence and associativity can be used to optimize code by avoiding
unnecessary parentheses and ensuring efficient computation.

Correct
± When working with complex expressions, knowing the precedence and associativity
allows developers to write code that behaves as intended, making it easier to reason about and maintain
± In case of unexpected results, knowing operator precedence and
associativity helps in debugging and identifying the root cause of issues
± Knowledge of precedence and associativity can be used to optimize code by avoiding
unnecessary parentheses and ensuring efficient computation.
So2ution-

Correct